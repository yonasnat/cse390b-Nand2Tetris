package compiler.AST;

public class Plus extends Expression {
    public Expression left;
    public Expression right;

    public Plus(Expression left, Expression right) {
        this.left = left;
        this.right = right;
    }

    @Override
    public void printDebug(int indent) {
        printIndentation(indent); System.out.println("[PLUS]");
        printIndentation(indent); System.out.println(" -Left:");
        left.printDebug(indent + 1);
        printIndentation(indent); System.out.println(" -Right:");
        right.printDebug(indent + 1);
    }

    @Override
    public void printASM() {
        comment("Start Plus");

        // PROJECT 7 TODO
        // (Step 2)

        // This is a BUGGY implementation of the ASM generation for the Plus
        // expression node. Debug the implementation and fix the TWO bugs it
        // contains. Recall that the Plus node should evaluate both of its arguments
        // (which are themselves expressions and by convention will each place their results
        // in R0), add the two results together, and place the sum in R0.

        // You will likely find it helpful to try compiling test/1_SimpleAddition.jack and stepping
        // through the code generated by Plus using the CPUEmulator tool. We recommend you "play
        // computer" and think about what should happen at each step, so you can discover where the
        // actual execution diverges from your expectation.

        // After debugging this file and implementing NumberLiteral.java, test/1_SimpleAddition.jack
        // should compile and run successfully.


        // evaluate `left`
        left.printASM();
        // grab the result of evaluating `left` from R0
        instr("@R0");
        instr("D=M");
        // evaluate `right`
        right.printASM();
        // push D onto the stack (see ASTNode.java for the code generated by push())
        push();
        // grab the result of evaluating `right` from R0
        instr("@R0");
        instr("D=M");
        // grab the previously stored value by "dereferencing" R1 (the stack pointer)
        instr("@R1");
        instr("A=M");
        // perform the addition!
        instr("D=D+A", "perform the addition");
        // store in R0
        instr("@R0");
        instr("M=D");
        // pop from the stack (see ASTNode.java for the code generated by pop())
        // the value popped is not used; it was already used above when we did @R1.
        pop();

        comment("End Plus");
    }
}